import * as _stitches_react_types_theme from '@stitches/react/types/theme';
import * as _stitches_react_types_css from '@stitches/react/types/css';
import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as _stitches_react_types_stitches from '@stitches/react/types/stitches';
import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as react from 'react';
import * as _stitches_react_types_util from '@stitches/react/types/util';

declare const styled: <Type extends _stitches_react_types_util.Function | keyof JSX.IntrinsicElements | react.ComponentType<any>, Composers extends (string | _stitches_react_types_util.Function | react.ComponentType<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{
    xs: "(max-width: 640px)";
    sm: "(max-width: 768px)";
    md: "(max-width: 1024px)";
    lg: "(max-width: 1280px)";
    xl: "(max-width: 1536px)";
}, {
    colors: {
        'primary-main': string;
        'primary-light': string;
        'primary-dark': string;
        'success-main': string;
        'success-light': string;
        'success-dark': string;
        'danger-main': string;
        'danger-light': string;
        'danger-dark': string;
        'warning-main': string;
        'warning-light': string;
        'warning-dark': string;
        black: string;
        white: string;
        grey100: string;
        grey200: string;
        grey300: string;
        grey400: string;
        grey500: string;
        grey600: string;
        grey700: string;
        grey800: string;
        grey900: string;
        grey950: string;
        title: string;
        'base-text': string;
        'help-text': string;
        'input-prefix': string;
        'input-icon': string;
        'tertiary-shape': string;
        'secondary-shape': string;
        'primary-shape': string;
        background: string;
        tooltip: string;
    };
    space: {
        px: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    fontSizes: {
        '9xl': string;
        '8xl': string;
        '7xl': string;
        '6xl': string;
        '5xl': string;
        '4xl': string;
        '3xl': string;
        '2xl': string;
        xl: string;
        lg: string;
        md: string;
        sm: string;
        xs: string;
        xxs: string;
    };
    fonts: {
        default: string;
        reading: string;
        code: string;
    };
    fontWeights: {
        light: number;
        regular: number;
        medium: number;
        bold: number;
    };
    lineHeights: {
        tall: string;
        base: string;
        short: string;
        shorter: string;
        none: string;
    };
    borderWidths: {
        default: string;
        thin: string;
        medium: string;
        thick: string;
        heavy: string;
    };
    radii: {
        default: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    opacity: {
        default: string;
        semiOpaque: string;
        intense: string;
        medium: string;
        light: string;
        semiTransparent: string;
    };
    shadows: {
        base: string;
    };
}, {
    width: "space";
    height: "space";
    opacity: "opacity";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.ComponentType<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : _stitches_react_types_util.WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => _stitches_react_types_styled_component.StyledComponent<Type, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    xs: "(max-width: 640px)";
    sm: "(max-width: 768px)";
    md: "(max-width: 1024px)";
    lg: "(max-width: 1280px)";
    xl: "(max-width: 1536px)";
}, _stitches_react_types_css_util.CSS<{
    xs: "(max-width: 640px)";
    sm: "(max-width: 768px)";
    md: "(max-width: 1024px)";
    lg: "(max-width: 1280px)";
    xl: "(max-width: 1536px)";
}, {
    colors: {
        'primary-main': string;
        'primary-light': string;
        'primary-dark': string;
        'success-main': string;
        'success-light': string;
        'success-dark': string;
        'danger-main': string;
        'danger-light': string;
        'danger-dark': string;
        'warning-main': string;
        'warning-light': string;
        'warning-dark': string;
        black: string;
        white: string;
        grey100: string;
        grey200: string;
        grey300: string;
        grey400: string;
        grey500: string;
        grey600: string;
        grey700: string;
        grey800: string;
        grey900: string;
        grey950: string;
        title: string;
        'base-text': string;
        'help-text': string;
        'input-prefix': string;
        'input-icon': string;
        'tertiary-shape': string;
        'secondary-shape': string;
        'primary-shape': string;
        background: string;
        tooltip: string;
    };
    space: {
        px: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    fontSizes: {
        '9xl': string;
        '8xl': string;
        '7xl': string;
        '6xl': string;
        '5xl': string;
        '4xl': string;
        '3xl': string;
        '2xl': string;
        xl: string;
        lg: string;
        md: string;
        sm: string;
        xs: string;
        xxs: string;
    };
    fonts: {
        default: string;
        reading: string;
        code: string;
    };
    fontWeights: {
        light: number;
        regular: number;
        medium: number;
        bold: number;
    };
    lineHeights: {
        tall: string;
        base: string;
        short: string;
        shorter: string;
        none: string;
    };
    borderWidths: {
        default: string;
        thin: string;
        medium: string;
        thick: string;
        heavy: string;
    };
    radii: {
        default: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    opacity: {
        default: string;
        semiOpaque: string;
        intense: string;
        medium: string;
        light: string;
        semiTransparent: string;
    };
    shadows: {
        base: string;
    };
}, {
    width: "space";
    height: "space";
    opacity: "opacity";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const css: <Composers extends (string | _stitches_react_types_util.Function | react.ExoticComponent<any> | react.JSXElementConstructor<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{
    xs: "(max-width: 640px)";
    sm: "(max-width: 768px)";
    md: "(max-width: 1024px)";
    lg: "(max-width: 1280px)";
    xl: "(max-width: 1536px)";
}, {
    colors: {
        'primary-main': string;
        'primary-light': string;
        'primary-dark': string;
        'success-main': string;
        'success-light': string;
        'success-dark': string;
        'danger-main': string;
        'danger-light': string;
        'danger-dark': string;
        'warning-main': string;
        'warning-light': string;
        'warning-dark': string;
        black: string;
        white: string;
        grey100: string;
        grey200: string;
        grey300: string;
        grey400: string;
        grey500: string;
        grey600: string;
        grey700: string;
        grey800: string;
        grey900: string;
        grey950: string;
        title: string;
        'base-text': string;
        'help-text': string;
        'input-prefix': string;
        'input-icon': string;
        'tertiary-shape': string;
        'secondary-shape': string;
        'primary-shape': string;
        background: string;
        tooltip: string;
    };
    space: {
        px: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    fontSizes: {
        '9xl': string;
        '8xl': string;
        '7xl': string;
        '6xl': string;
        '5xl': string;
        '4xl': string;
        '3xl': string;
        '2xl': string;
        xl: string;
        lg: string;
        md: string;
        sm: string;
        xs: string;
        xxs: string;
    };
    fonts: {
        default: string;
        reading: string;
        code: string;
    };
    fontWeights: {
        light: number;
        regular: number;
        medium: number;
        bold: number;
    };
    lineHeights: {
        tall: string;
        base: string;
        short: string;
        shorter: string;
        none: string;
    };
    borderWidths: {
        default: string;
        thin: string;
        medium: string;
        thick: string;
        heavy: string;
    };
    radii: {
        default: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    opacity: {
        default: string;
        semiOpaque: string;
        intense: string;
        medium: string;
        light: string;
        semiTransparent: string;
    };
    shadows: {
        base: string;
    };
}, {
    width: "space";
    height: "space";
    opacity: "opacity";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.ExoticComponent<any> | react.JSXElementConstructor<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : _stitches_react_types_util.WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => _stitches_react_types_styled_component.CssComponent<_stitches_react_types_styled_component.StyledComponentType<Composers>, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    xs: "(max-width: 640px)";
    sm: "(max-width: 768px)";
    md: "(max-width: 1024px)";
    lg: "(max-width: 1280px)";
    xl: "(max-width: 1536px)";
}, CSS>;
declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? _stitches_react_types_css.AtRule.FontFace | _stitches_react_types_css.AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: _stitches_react_types_css_util.CSS<{
        xs: "(max-width: 640px)";
        sm: "(max-width: 768px)";
        md: "(max-width: 1024px)";
        lg: "(max-width: 1280px)";
        xl: "(max-width: 1536px)";
    }, {
        colors: {
            'primary-main': string;
            'primary-light': string;
            'primary-dark': string;
            'success-main': string;
            'success-light': string;
            'success-dark': string;
            'danger-main': string;
            'danger-light': string;
            'danger-dark': string;
            'warning-main': string;
            'warning-light': string;
            'warning-dark': string;
            black: string;
            white: string;
            grey100: string;
            grey200: string;
            grey300: string;
            grey400: string;
            grey500: string;
            grey600: string;
            grey700: string;
            grey800: string;
            grey900: string;
            grey950: string;
            title: string;
            'base-text': string;
            'help-text': string;
            'input-prefix': string;
            'input-icon': string;
            'tertiary-shape': string;
            'secondary-shape': string;
            'primary-shape': string;
            background: string;
            tooltip: string;
        };
        space: {
            px: string;
            0.5: string;
            1: string;
            1.5: string;
            2: string;
            2.5: string;
            3: string;
            3.5: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            '9xl': string;
            '8xl': string;
            '7xl': string;
            '6xl': string;
            '5xl': string;
            '4xl': string;
            '3xl': string;
            '2xl': string;
            xl: string;
            lg: string;
            md: string;
            sm: string;
            xs: string;
            xxs: string;
        };
        fonts: {
            default: string;
            reading: string;
            code: string;
        };
        fontWeights: {
            light: number;
            regular: number;
            medium: number;
            bold: number;
        };
        lineHeights: {
            tall: string;
            base: string;
            short: string;
            shorter: string;
            none: string;
        };
        borderWidths: {
            default: string;
            thin: string;
            medium: string;
            thick: string;
            heavy: string;
        };
        radii: {
            default: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            full: string;
        };
        opacity: {
            default: string;
            semiOpaque: string;
            intense: string;
            medium: string;
            light: string;
            semiTransparent: string;
        };
        shadows: {
            base: string;
        };
    }, {
        width: "space";
        height: "space";
        opacity: "opacity";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
} : K extends `@property ${string}` ? _stitches_react_types_css.AtRule.Property : _stitches_react_types_css_util.CSS<{
    xs: "(max-width: 640px)";
    sm: "(max-width: 768px)";
    md: "(max-width: 1024px)";
    lg: "(max-width: 1280px)";
    xl: "(max-width: 1536px)";
}, {
    colors: {
        'primary-main': string;
        'primary-light': string;
        'primary-dark': string;
        'success-main': string;
        'success-light': string;
        'success-dark': string;
        'danger-main': string;
        'danger-light': string;
        'danger-dark': string;
        'warning-main': string;
        'warning-light': string;
        'warning-dark': string;
        black: string;
        white: string;
        grey100: string;
        grey200: string;
        grey300: string;
        grey400: string;
        grey500: string;
        grey600: string;
        grey700: string;
        grey800: string;
        grey900: string;
        grey950: string;
        title: string;
        'base-text': string;
        'help-text': string;
        'input-prefix': string;
        'input-icon': string;
        'tertiary-shape': string;
        'secondary-shape': string;
        'primary-shape': string;
        background: string;
        tooltip: string;
    };
    space: {
        px: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    fontSizes: {
        '9xl': string;
        '8xl': string;
        '7xl': string;
        '6xl': string;
        '5xl': string;
        '4xl': string;
        '3xl': string;
        '2xl': string;
        xl: string;
        lg: string;
        md: string;
        sm: string;
        xs: string;
        xxs: string;
    };
    fonts: {
        default: string;
        reading: string;
        code: string;
    };
    fontWeights: {
        light: number;
        regular: number;
        medium: number;
        bold: number;
    };
    lineHeights: {
        tall: string;
        base: string;
        short: string;
        shorter: string;
        none: string;
    };
    borderWidths: {
        default: string;
        thin: string;
        medium: string;
        thick: string;
        heavy: string;
    };
    radii: {
        default: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    opacity: {
        default: string;
        semiOpaque: string;
        intense: string;
        medium: string;
        light: string;
        semiTransparent: string;
    };
    shadows: {
        base: string;
    };
}, {
    width: "space";
    height: "space";
    opacity: "opacity";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>; })[]) => () => string;
declare const keyframes: (style: {
    [offset: string]: _stitches_react_types_css_util.CSS<{
        xs: "(max-width: 640px)";
        sm: "(max-width: 768px)";
        md: "(max-width: 1024px)";
        lg: "(max-width: 1280px)";
        xl: "(max-width: 1536px)";
    }, {
        colors: {
            'primary-main': string;
            'primary-light': string;
            'primary-dark': string;
            'success-main': string;
            'success-light': string;
            'success-dark': string;
            'danger-main': string;
            'danger-light': string;
            'danger-dark': string;
            'warning-main': string;
            'warning-light': string;
            'warning-dark': string;
            black: string;
            white: string;
            grey100: string;
            grey200: string;
            grey300: string;
            grey400: string;
            grey500: string;
            grey600: string;
            grey700: string;
            grey800: string;
            grey900: string;
            grey950: string;
            title: string;
            'base-text': string;
            'help-text': string;
            'input-prefix': string;
            'input-icon': string;
            'tertiary-shape': string;
            'secondary-shape': string;
            'primary-shape': string;
            background: string;
            tooltip: string;
        };
        space: {
            px: string;
            0.5: string;
            1: string;
            1.5: string;
            2: string;
            2.5: string;
            3: string;
            3.5: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            '9xl': string;
            '8xl': string;
            '7xl': string;
            '6xl': string;
            '5xl': string;
            '4xl': string;
            '3xl': string;
            '2xl': string;
            xl: string;
            lg: string;
            md: string;
            sm: string;
            xs: string;
            xxs: string;
        };
        fonts: {
            default: string;
            reading: string;
            code: string;
        };
        fontWeights: {
            light: number;
            regular: number;
            medium: number;
            bold: number;
        };
        lineHeights: {
            tall: string;
            base: string;
            short: string;
            shorter: string;
            none: string;
        };
        borderWidths: {
            default: string;
            thin: string;
            medium: string;
            thick: string;
            heavy: string;
        };
        radii: {
            default: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            full: string;
        };
        opacity: {
            default: string;
            semiOpaque: string;
            intense: string;
            medium: string;
            light: string;
            semiTransparent: string;
        };
        shadows: {
            base: string;
        };
    }, {
        width: "space";
        height: "space";
        opacity: "opacity";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
}) => {
    (): string;
    name: string;
};
declare const getCssText: () => string;
declare const theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        'primary-main': _stitches_react_types_theme.Token<"primary-main", string, "colors", "">;
        'primary-light': _stitches_react_types_theme.Token<"primary-light", string, "colors", "">;
        'primary-dark': _stitches_react_types_theme.Token<"primary-dark", string, "colors", "">;
        'success-main': _stitches_react_types_theme.Token<"success-main", string, "colors", "">;
        'success-light': _stitches_react_types_theme.Token<"success-light", string, "colors", "">;
        'success-dark': _stitches_react_types_theme.Token<"success-dark", string, "colors", "">;
        'danger-main': _stitches_react_types_theme.Token<"danger-main", string, "colors", "">;
        'danger-light': _stitches_react_types_theme.Token<"danger-light", string, "colors", "">;
        'danger-dark': _stitches_react_types_theme.Token<"danger-dark", string, "colors", "">;
        'warning-main': _stitches_react_types_theme.Token<"warning-main", string, "colors", "">;
        'warning-light': _stitches_react_types_theme.Token<"warning-light", string, "colors", "">;
        'warning-dark': _stitches_react_types_theme.Token<"warning-dark", string, "colors", "">;
        black: _stitches_react_types_theme.Token<"black", string, "colors", "">;
        white: _stitches_react_types_theme.Token<"white", string, "colors", "">;
        grey100: _stitches_react_types_theme.Token<"grey100", string, "colors", "">;
        grey200: _stitches_react_types_theme.Token<"grey200", string, "colors", "">;
        grey300: _stitches_react_types_theme.Token<"grey300", string, "colors", "">;
        grey400: _stitches_react_types_theme.Token<"grey400", string, "colors", "">;
        grey500: _stitches_react_types_theme.Token<"grey500", string, "colors", "">;
        grey600: _stitches_react_types_theme.Token<"grey600", string, "colors", "">;
        grey700: _stitches_react_types_theme.Token<"grey700", string, "colors", "">;
        grey800: _stitches_react_types_theme.Token<"grey800", string, "colors", "">;
        grey900: _stitches_react_types_theme.Token<"grey900", string, "colors", "">;
        grey950: _stitches_react_types_theme.Token<"grey950", string, "colors", "">;
        title: _stitches_react_types_theme.Token<"title", string, "colors", "">;
        'base-text': _stitches_react_types_theme.Token<"base-text", string, "colors", "">;
        'help-text': _stitches_react_types_theme.Token<"help-text", string, "colors", "">;
        'input-prefix': _stitches_react_types_theme.Token<"input-prefix", string, "colors", "">;
        'input-icon': _stitches_react_types_theme.Token<"input-icon", string, "colors", "">;
        'tertiary-shape': _stitches_react_types_theme.Token<"tertiary-shape", string, "colors", "">;
        'secondary-shape': _stitches_react_types_theme.Token<"secondary-shape", string, "colors", "">;
        'primary-shape': _stitches_react_types_theme.Token<"primary-shape", string, "colors", "">;
        background: _stitches_react_types_theme.Token<"background", string, "colors", "">;
        tooltip: _stitches_react_types_theme.Token<"tooltip", string, "colors", "">;
    };
    space: {
        px: _stitches_react_types_theme.Token<"px", string, "space", "">;
        0.5: _stitches_react_types_theme.Token<"0.5", string, "space", "">;
        1: _stitches_react_types_theme.Token<"1", string, "space", "">;
        1.5: _stitches_react_types_theme.Token<"1.5", string, "space", "">;
        2: _stitches_react_types_theme.Token<"2", string, "space", "">;
        2.5: _stitches_react_types_theme.Token<"2.5", string, "space", "">;
        3: _stitches_react_types_theme.Token<"3", string, "space", "">;
        3.5: _stitches_react_types_theme.Token<"3.5", string, "space", "">;
        4: _stitches_react_types_theme.Token<"4", string, "space", "">;
        5: _stitches_react_types_theme.Token<"5", string, "space", "">;
        6: _stitches_react_types_theme.Token<"6", string, "space", "">;
        7: _stitches_react_types_theme.Token<"7", string, "space", "">;
        8: _stitches_react_types_theme.Token<"8", string, "space", "">;
        9: _stitches_react_types_theme.Token<"9", string, "space", "">;
        10: _stitches_react_types_theme.Token<"10", string, "space", "">;
        11: _stitches_react_types_theme.Token<"11", string, "space", "">;
        12: _stitches_react_types_theme.Token<"12", string, "space", "">;
        14: _stitches_react_types_theme.Token<"14", string, "space", "">;
        16: _stitches_react_types_theme.Token<"16", string, "space", "">;
        20: _stitches_react_types_theme.Token<"20", string, "space", "">;
        24: _stitches_react_types_theme.Token<"24", string, "space", "">;
        28: _stitches_react_types_theme.Token<"28", string, "space", "">;
        32: _stitches_react_types_theme.Token<"32", string, "space", "">;
        36: _stitches_react_types_theme.Token<"36", string, "space", "">;
        40: _stitches_react_types_theme.Token<"40", string, "space", "">;
        44: _stitches_react_types_theme.Token<"44", string, "space", "">;
        48: _stitches_react_types_theme.Token<"48", string, "space", "">;
        52: _stitches_react_types_theme.Token<"52", string, "space", "">;
        56: _stitches_react_types_theme.Token<"56", string, "space", "">;
        60: _stitches_react_types_theme.Token<"60", string, "space", "">;
        64: _stitches_react_types_theme.Token<"64", string, "space", "">;
        72: _stitches_react_types_theme.Token<"72", string, "space", "">;
        80: _stitches_react_types_theme.Token<"80", string, "space", "">;
        96: _stitches_react_types_theme.Token<"96", string, "space", "">;
    };
    fontSizes: {
        '9xl': _stitches_react_types_theme.Token<"9xl", string, "fontSizes", "">;
        '8xl': _stitches_react_types_theme.Token<"8xl", string, "fontSizes", "">;
        '7xl': _stitches_react_types_theme.Token<"7xl", string, "fontSizes", "">;
        '6xl': _stitches_react_types_theme.Token<"6xl", string, "fontSizes", "">;
        '5xl': _stitches_react_types_theme.Token<"5xl", string, "fontSizes", "">;
        '4xl': _stitches_react_types_theme.Token<"4xl", string, "fontSizes", "">;
        '3xl': _stitches_react_types_theme.Token<"3xl", string, "fontSizes", "">;
        '2xl': _stitches_react_types_theme.Token<"2xl", string, "fontSizes", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "fontSizes", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "fontSizes", "">;
        md: _stitches_react_types_theme.Token<"md", string, "fontSizes", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "fontSizes", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "fontSizes", "">;
        xxs: _stitches_react_types_theme.Token<"xxs", string, "fontSizes", "">;
    };
    fonts: {
        default: _stitches_react_types_theme.Token<"default", string, "fonts", "">;
        reading: _stitches_react_types_theme.Token<"reading", string, "fonts", "">;
        code: _stitches_react_types_theme.Token<"code", string, "fonts", "">;
    };
    fontWeights: {
        light: _stitches_react_types_theme.Token<"light", string, "fontWeights", "">;
        regular: _stitches_react_types_theme.Token<"regular", string, "fontWeights", "">;
        medium: _stitches_react_types_theme.Token<"medium", string, "fontWeights", "">;
        bold: _stitches_react_types_theme.Token<"bold", string, "fontWeights", "">;
    };
    lineHeights: {
        tall: _stitches_react_types_theme.Token<"tall", string, "lineHeights", "">;
        base: _stitches_react_types_theme.Token<"base", string, "lineHeights", "">;
        short: _stitches_react_types_theme.Token<"short", string, "lineHeights", "">;
        shorter: _stitches_react_types_theme.Token<"shorter", string, "lineHeights", "">;
        none: _stitches_react_types_theme.Token<"none", string, "lineHeights", "">;
    };
    borderWidths: {
        default: _stitches_react_types_theme.Token<"default", string, "borderWidths", "">;
        thin: _stitches_react_types_theme.Token<"thin", string, "borderWidths", "">;
        medium: _stitches_react_types_theme.Token<"medium", string, "borderWidths", "">;
        thick: _stitches_react_types_theme.Token<"thick", string, "borderWidths", "">;
        heavy: _stitches_react_types_theme.Token<"heavy", string, "borderWidths", "">;
    };
    radii: {
        default: _stitches_react_types_theme.Token<"default", string, "radii", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "radii", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "radii", "">;
        md: _stitches_react_types_theme.Token<"md", string, "radii", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "radii", "">;
        full: _stitches_react_types_theme.Token<"full", string, "radii", "">;
    };
    opacity: {
        default: _stitches_react_types_theme.Token<"default", string, "opacity", "">;
        semiOpaque: _stitches_react_types_theme.Token<"semiOpaque", string, "opacity", "">;
        intense: _stitches_react_types_theme.Token<"intense", string, "opacity", "">;
        medium: _stitches_react_types_theme.Token<"medium", string, "opacity", "">;
        light: _stitches_react_types_theme.Token<"light", string, "opacity", "">;
        semiTransparent: _stitches_react_types_theme.Token<"semiTransparent", string, "opacity", "">;
    };
    shadows: {
        base: _stitches_react_types_theme.Token<"base", string, "shadows", "">;
    };
};
declare const createTheme: <Argument0 extends string | ({
    colors?: {
        'primary-main'?: string | number | boolean | undefined;
        'primary-light'?: string | number | boolean | undefined;
        'primary-dark'?: string | number | boolean | undefined;
        'success-main'?: string | number | boolean | undefined;
        'success-light'?: string | number | boolean | undefined;
        'success-dark'?: string | number | boolean | undefined;
        'danger-main'?: string | number | boolean | undefined;
        'danger-light'?: string | number | boolean | undefined;
        'danger-dark'?: string | number | boolean | undefined;
        'warning-main'?: string | number | boolean | undefined;
        'warning-light'?: string | number | boolean | undefined;
        'warning-dark'?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        white?: string | number | boolean | undefined;
        grey100?: string | number | boolean | undefined;
        grey200?: string | number | boolean | undefined;
        grey300?: string | number | boolean | undefined;
        grey400?: string | number | boolean | undefined;
        grey500?: string | number | boolean | undefined;
        grey600?: string | number | boolean | undefined;
        grey700?: string | number | boolean | undefined;
        grey800?: string | number | boolean | undefined;
        grey900?: string | number | boolean | undefined;
        grey950?: string | number | boolean | undefined;
        title?: string | number | boolean | undefined;
        'base-text'?: string | number | boolean | undefined;
        'help-text'?: string | number | boolean | undefined;
        'input-prefix'?: string | number | boolean | undefined;
        'input-icon'?: string | number | boolean | undefined;
        'tertiary-shape'?: string | number | boolean | undefined;
        'secondary-shape'?: string | number | boolean | undefined;
        'primary-shape'?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        tooltip?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        px?: string | number | boolean | undefined;
        0.5?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        1.5?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        2.5?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        3.5?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        11?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        '9xl'?: string | number | boolean | undefined;
        '8xl'?: string | number | boolean | undefined;
        '7xl'?: string | number | boolean | undefined;
        '6xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '3xl'?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        xxs?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        default?: string | number | boolean | undefined;
        reading?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        light?: string | number | boolean | undefined;
        regular?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        tall?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        shorter?: string | number | boolean | undefined;
        none?: string | number | boolean | undefined;
    } | undefined;
    borderWidths?: {
        default?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        thick?: string | number | boolean | undefined;
        heavy?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        default?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    opacity?: {
        default?: string | number | boolean | undefined;
        semiOpaque?: string | number | boolean | undefined;
        intense?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        semiTransparent?: string | number | boolean | undefined;
    } | undefined;
    shadows?: {
        base?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        'primary-main'?: string | number | boolean | undefined;
        'primary-light'?: string | number | boolean | undefined;
        'primary-dark'?: string | number | boolean | undefined;
        'success-main'?: string | number | boolean | undefined;
        'success-light'?: string | number | boolean | undefined;
        'success-dark'?: string | number | boolean | undefined;
        'danger-main'?: string | number | boolean | undefined;
        'danger-light'?: string | number | boolean | undefined;
        'danger-dark'?: string | number | boolean | undefined;
        'warning-main'?: string | number | boolean | undefined;
        'warning-light'?: string | number | boolean | undefined;
        'warning-dark'?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        white?: string | number | boolean | undefined;
        grey100?: string | number | boolean | undefined;
        grey200?: string | number | boolean | undefined;
        grey300?: string | number | boolean | undefined;
        grey400?: string | number | boolean | undefined;
        grey500?: string | number | boolean | undefined;
        grey600?: string | number | boolean | undefined;
        grey700?: string | number | boolean | undefined;
        grey800?: string | number | boolean | undefined;
        grey900?: string | number | boolean | undefined;
        grey950?: string | number | boolean | undefined;
        title?: string | number | boolean | undefined;
        'base-text'?: string | number | boolean | undefined;
        'help-text'?: string | number | boolean | undefined;
        'input-prefix'?: string | number | boolean | undefined;
        'input-icon'?: string | number | boolean | undefined;
        'tertiary-shape'?: string | number | boolean | undefined;
        'secondary-shape'?: string | number | boolean | undefined;
        'primary-shape'?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        tooltip?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        px?: string | number | boolean | undefined;
        0.5?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        1.5?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        2.5?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        3.5?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        11?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        '9xl'?: string | number | boolean | undefined;
        '8xl'?: string | number | boolean | undefined;
        '7xl'?: string | number | boolean | undefined;
        '6xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '3xl'?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        xxs?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        default?: string | number | boolean | undefined;
        reading?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        light?: string | number | boolean | undefined;
        regular?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        tall?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        shorter?: string | number | boolean | undefined;
        none?: string | number | boolean | undefined;
    } | undefined;
    borderWidths?: {
        default?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        thick?: string | number | boolean | undefined;
        heavy?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        default?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    opacity?: {
        default?: string | number | boolean | undefined;
        semiOpaque?: string | number | boolean | undefined;
        intense?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        semiTransparent?: string | number | boolean | undefined;
    } | undefined;
    shadows?: {
        base?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? _stitches_react_types_stitches.ThemeTokens<Argument1, ""> : _stitches_react_types_stitches.ThemeTokens<Argument0, "">);
declare const config: {
    prefix: "";
    media: {
        xs: "(max-width: 640px)";
        sm: "(max-width: 768px)";
        md: "(max-width: 1024px)";
        lg: "(max-width: 1280px)";
        xl: "(max-width: 1536px)";
    };
    theme: {
        colors: {
            'primary-main': string;
            'primary-light': string;
            'primary-dark': string;
            'success-main': string;
            'success-light': string;
            'success-dark': string;
            'danger-main': string;
            'danger-light': string;
            'danger-dark': string;
            'warning-main': string;
            'warning-light': string;
            'warning-dark': string;
            black: string;
            white: string;
            grey100: string;
            grey200: string;
            grey300: string;
            grey400: string;
            grey500: string;
            grey600: string;
            grey700: string;
            grey800: string;
            grey900: string;
            grey950: string;
            title: string;
            'base-text': string;
            'help-text': string;
            'input-prefix': string;
            'input-icon': string;
            'tertiary-shape': string;
            'secondary-shape': string;
            'primary-shape': string;
            background: string;
            tooltip: string;
        };
        space: {
            px: string;
            0.5: string;
            1: string;
            1.5: string;
            2: string;
            2.5: string;
            3: string;
            3.5: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            '9xl': string;
            '8xl': string;
            '7xl': string;
            '6xl': string;
            '5xl': string;
            '4xl': string;
            '3xl': string;
            '2xl': string;
            xl: string;
            lg: string;
            md: string;
            sm: string;
            xs: string;
            xxs: string;
        };
        fonts: {
            default: string;
            reading: string;
            code: string;
        };
        fontWeights: {
            light: number;
            regular: number;
            medium: number;
            bold: number;
        };
        lineHeights: {
            tall: string;
            base: string;
            short: string;
            shorter: string;
            none: string;
        };
        borderWidths: {
            default: string;
            thin: string;
            medium: string;
            thick: string;
            heavy: string;
        };
        radii: {
            default: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            full: string;
        };
        opacity: {
            default: string;
            semiOpaque: string;
            intense: string;
            medium: string;
            light: string;
            semiTransparent: string;
        };
        shadows: {
            base: string;
        };
    };
    themeMap: {
        width: "space";
        height: "space";
        opacity: "opacity";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {};
};

export { config, createTheme, css, getCssText, globalCss, keyframes, styled, theme };
